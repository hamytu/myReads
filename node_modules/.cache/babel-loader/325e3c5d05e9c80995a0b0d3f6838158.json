{"ast":null,"code":"const api = \"https://reactnd-books-api.udacity.com\";\n\n// Token management\nconst getToken = () => {\n  let token = localStorage.token;\n  if (!token) {\n    token = Math.random().toString(36).substr(-8);\n    localStorage.token = token;\n  }\n  return token;\n};\n\n// Header configuration\nconst getHeaders = (contentType = \"application/json\") => ({\n  Accept: \"application/json\",\n  Authorization: getToken(),\n  \"Content-Type\": contentType\n});\n\n// API functions\nexport const get = async bookId => {\n  try {\n    const response = await fetch(`${api}/books/${bookId}`, {\n      headers: getHeaders()\n    });\n    const data = await response.json();\n    return data.book;\n  } catch (error) {\n    console.error(\"Error fetching book:\", error);\n    throw error;\n  }\n};\nexport const getAll = async () => {\n  try {\n    const response = await fetch(`${api}/books`, {\n      headers: getHeaders()\n    });\n    const data = await response.json();\n    return data.books;\n  } catch (error) {\n    console.error(\"Error fetching all books:\", error);\n    throw error;\n  }\n};\nexport const update = async (bookID, shelf) => {\n  try {\n    const response = await fetch(`${api}/books/${bookID}`, {\n      method: \"PUT\",\n      headers: getHeaders(),\n      body: JSON.stringify({\n        shelf\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating book shelf:\", error);\n    throw error;\n  }\n};\nexport const search = async (query, maxResults) => {\n  try {\n    const response = await fetch(`${api}/search`, {\n      method: \"POST\",\n      headers: getHeaders(),\n      body: JSON.stringify({\n        query,\n        maxResults\n      })\n    });\n    const data = await response.json();\n    return data.books;\n  } catch (error) {\n    console.error(\"Error searching books:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getToken","token","localStorage","Math","random","toString","substr","getHeaders","contentType","Accept","Authorization","get","bookId","response","fetch","headers","data","json","book","error","console","getAll","books","update","bookID","shelf","method","body","JSON","stringify","search","query","maxResults"],"sources":["C:/Users/Admin/Desktop/React/project/myreads/starter/src/BooksAPI.js"],"sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\n// Token management\nconst getToken = () => {\n  let token = localStorage.token;\n  if (!token) {\n    token = Math.random().toString(36).substr(-8);\n    localStorage.token = token;\n  }\n  return token;\n};\n\n// Header configuration\nconst getHeaders = (contentType = \"application/json\") => ({\n  Accept: \"application/json\",\n  Authorization: getToken(),\n  \"Content-Type\": contentType,\n});\n\n// API functions\nexport const get = async (bookId) => {\n  try {\n    const response = await fetch(`${api}/books/${bookId}`, { headers: getHeaders() });\n    const data = await response.json();\n    return data.book;\n  } catch (error) {\n    console.error(\"Error fetching book:\", error);\n    throw error;\n  }\n};\n\nexport const getAll = async () => {\n  try {\n    const response = await fetch(`${api}/books`, { headers: getHeaders() });\n    const data = await response.json();\n    return data.books;\n  } catch (error) {\n    console.error(\"Error fetching all books:\", error);\n    throw error;\n  }\n};\n\nexport const update = async (bookID, shelf) => {\n  try {\n    const response = await fetch(`${api}/books/${bookID}`, {\n      method: \"PUT\",\n      headers: getHeaders(),\n      body: JSON.stringify({ shelf }),\n    });\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error updating book shelf:\", error);\n    throw error;\n  }\n};\n\nexport const search = async (query, maxResults) => {\n  try {\n    const response = await fetch(`${api}/search`, {\n      method: \"POST\",\n      headers: getHeaders(),\n      body: JSON.stringify({ query, maxResults }),\n    });\n    const data = await response.json();\n    return data.books;\n  } catch (error) {\n    console.error(\"Error searching books:\", error);\n    throw error;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}